
  You are an expert in TypeScript, Node.js, Next.js, Next.js App Router, React, PrismicCMS and Tailwind.
  
  Code Style and Structure
  - Write concise, technical TypeScript code with accurate examples.
  - Use functional and declarative programming patterns; avoid classes.
  - Prefer iteration and modularization over code duplication.
  - Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
  - Structure files: exported component, subcomponents, helpers, static content, types.
  
  Naming Conventions
  - Use lowercase with dashes for directories (e.g., components/auth-wizard).
  - Favor named exports for components.
  
  TypeScript Usage
  - Use TypeScript for all code; prefer interfaces over types.
  - Avoid enums; use maps instead.
  - Use functional components with TypeScript interfaces.
  - If a function has less than four types, declare them inline.
  
  Syntax and Formatting
  - Use the "function" keyword for pure functions.
  - Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
  - Use declarative JSX.
  - Comment the code using concise comments.
  - Reorder the imports to the top of the file so that they are grouped by type.
  - Remove unused imports.
  
  UI and Styling
  - Use Tailwind for components and styling.
  - Implement responsive design with Tailwind CSS; use a mobile-first approach.
  
  Performance Optimization
  - Minimize 'use client', 'useEffect', and 'setState'; favor React Server Components (RSC).
  - Wrap client components in Suspense with fallback.
  - Use dynamic loading for non-critical components.
  - Optimize images: use WebP format, include size data, implement lazy loading.
  
  Key Conventions
  - Always use yarn as the package manager.
  - Always use app router configurations, not pages router.
  - Use 'nuqs' for URL search parameter state management.
  - Optimize Web Vitals (LCP, CLS, FID).
  - Limit 'use client':
    - Favor server components and Next.js SSR.
    - Use only for Web API access in small components.
    - Avoid for data fetching or state management.
  
  Follow Next.js docs for Data Fetching, Rendering, and Routing: https://nextjs.org/docs
  Follow Tailwind docs for Styling: https://tailwindcss.com/docs/guides/nextjs

  Proyect PRD
  # **PRD para MVP de Simplificación del Proceso de Comprobantes para Ejecutivos de Venta**

### **tl;dr:**

Desarrollar un MVP que permite a ejecutivos de venta y al equipo de ventas manejar de manera eficiente la reconciliación de facturas mediante una aplicación móvil. Este MVP se enfocará en funcionalidades básicas que permitan cargar y verificar comprobantes y detalles de pago.

## **Goals:**

### **Business Goals:**

- Reducir el proceso de manejo de comprobantes a no más de 2 minutos en promedio.
- Conseguir una tasa de error por debajo del 5% en requerir a ejecutivos conciliar doble.

### **User Goals:**

- Facilitar a los ejecutivos de venta la carga rápida de información de facturas.
- Permitir al equipo de compras verificar de forma inmediata las conciliaciones realizadas.

### **Non-Goals:**

- Integraciones complejas con sistemas de gestión existentes.
- Características avanzadas como análisis de datos o reportes personalizados.

## **User stories:**

- **Como miembro de equipo de ventas**, quiero poder introducir el documento de embarque en la aplicación para que se generen automáticamente tareas de carga de comprobantes (un listado de facturas asignadas a un ejecutivo de ventas).
- **Como ejecutivo de venta**, necesito visualizar un listado de mis facturas pendientes y poder elegir una para añadir el comprobante y detalles de pago fácilmente.
- **Como ejecutivo de venta**, necesito poder editar una factura que haya llenado antes.
- **Como miembro del equipo de compras**, deseo tener un tablero donde pueda revisar rápidamente las facturas conciliadas para asegurar su correcta finalización.